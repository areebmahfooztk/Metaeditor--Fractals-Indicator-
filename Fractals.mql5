#include<Trade\Trade.mqh>
CTrade trade ;
void OnTick()
  {  
      double Ask=NormalizeDouble(SymbolInfoDouble(_Symbol,SYMBOL_ASK),_Digits);
      double Bid=NormalizeDouble(SymbolInfoDouble(_Symbol,SYMBOL_BID),_Digits);
      string signal="";
   
      MqlRates PriceArray[];
   
      ArraySetAsSeries(PriceArray,true);
   
      int Data = CopyRates(_Symbol,_Period,0,3,PriceArray);
   
      double UpperFractalsArray[],LowerFractalsArray[];
   
      int FractalsDefinition = iFractals(_Symbol,_Period);
   
      ArraySetAsSeries(UpperFractalsArray,true);
      ArraySetAsSeries(LowerFractalsArray,true);
   
      CopyBuffer(FractalsDefinition,UPPER_LINE,1,3,UpperFractalsArray);
      CopyBuffer(FractalsDefinition,LOWER_LINE,1,3,LowerFractalsArray);
   
   
   
     double UpperFractalsValue=UpperFractalsArray[1];
     double LowerFractalsValue=LowerFractalsArray[1];
   
   
   
   
     if (UpperFractalsValue==EMPTY_VALUE)
     UpperFractalsValue=0;
   
     if (LowerFractalsValue==EMPTY_VALUE)
     LowerFractalsValue=0;
   
   
     if (LowerFractalsValue!=0)
     if (LowerFractalsValue<PriceArray[1].low)
     {
       signal = "buy";
     }  
   
     if (UpperFractalsValue !=0)
     if (UpperFractalsValue > PriceArray[1].high)
   
     {
       signal="sell";
     }
   
   
     if (signal =="sell" && PositionsTotal()<1)
     trade.Sell(0.10,NULL,Bid,(Bid+200* _Point),(Bid-5* _Point),NULL);
   
   
     if (signal=="buy" && PositionsTotal()<1)
     trade.Buy(0.10, NULL, Ask,(Ask-200* _Point),(Ask+5* _Point),NULL);
   
   
     Comment(
           "Signal is ",signal,"\n",
           "Upper Fractals value",UpperFractalsValue,"\n",
           "lower Fractals value",LowerFractalsValue,"\n"
           );
 
  }
